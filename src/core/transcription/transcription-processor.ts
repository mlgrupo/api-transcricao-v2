import { Logger } from "../../utils/logger";
import fs from "fs/promises";
import { exec } from "child_process";
import { promisify } from "util";
import path from "path";

/**
 * Interface simplificada para vers√£o gratuita
 * FILOSOFIA: Mantemos apenas os campos essenciais, eliminando complexidade desnecess√°ria
 * que estava causando problemas no sistema anterior
 */
export interface TranscriptionResult {
  status: "success" | "error";
  text?: string;
  language?: string;
  processing_type?: string;
  timestamp?: string;
  error?: string;
  diarization_available?: boolean; // Indica se diariza√ß√£o gratuita est√° funcionando
}

/**
 * Configura√ß√£o simplificada para vers√£o gratuita
 * PEDAGOGIA: Cada op√ß√£o tem um prop√≥sito claro e mensur√°vel, 
 * diferente do sistema anterior que tinha dezenas de configura√ß√µes confusas
 */
export interface TranscriptionConfig {
  maxWorkers?: number;               // Quantos processos paralelos usar
  enableDiarization?: boolean;       // Se deve tentar identificar speakers
  enableDirectTranscription?: boolean; // Para √°udios muito curtos, pular diariza√ß√£o
  timeoutMinutes?: number;           // Timeout configur√°vel baseado no tamanho do √°udio
}

/**
 * CLASSE PRINCIPAL: TranscriptionProcessor
 * 
 * Esta classe implementa uma abordagem educativa para transcri√ß√£o de √°udio:
 * 1. SIMPLICIDADE: Usa apenas depend√™ncias essenciais
 * 2. ROBUSTEZ: M√∫ltiplos fallbacks em caso de erro
 * 3. OBSERVABILIDADE: Logs detalhados para entender o que est√° acontecendo
 * 4. EFICI√äNCIA: Evita downloads repetitivos e uso desnecess√°rio de recursos
 */
export class TranscriptionProcessor {
  private config: TranscriptionConfig;

  constructor(
    private logger: Logger,
    config: TranscriptionConfig = {}
  ) {
    // FILOSOFIA DE CONFIGURA√á√ÉO: Valores padr√£o conservadores e testados
    // que funcionam bem na maioria dos cen√°rios de produ√ß√£o
    this.config = {
      maxWorkers: parseInt(process.env.MAX_WORKERS || '4'), // Conservador para evitar sobrecarga
      enableDiarization: true,        // Por padr√£o, tentar identificar speakers
      enableDirectTranscription: false, // Por padr√£o, usar processo completo
      timeoutMinutes: 30,             // 30 minutos √© tempo suficiente para maioria dos √°udios
      ...config
    };
    
    this.logger.info("TranscriptionProcessor iniciado (vers√£o gratuita otimizada)", {
      config: this.config,
      philosophy: "Simplicidade, robustez e efici√™ncia"
    });
  }

  /**
   * M√âTODO PRINCIPAL: transcribeAudio
   * 
   * Este √© o ponto de entrada principal. Funciona como um "maestro" que
   * orquestra todo o processo de transcri√ß√£o, desde valida√ß√£o at√© resultado final.
   * 
   * FLUXO PEDAG√ìGICO:
   * 1. Validar ambiente (como verificar se temos todos os ingredientes)
   * 2. Executar transcri√ß√£o principal (como seguir a receita principal)
   * 3. Se falhar, usar fallbacks progressivos (como ter receitas alternativas)
   */
  public async transcribeAudio(
    audioPath: string, 
    videoId: string,
    outputDir?: string
  ): Promise<string> {
    this.logger.info(`üéØ Iniciando transcri√ß√£o educativa para videoId: ${videoId}`, {
      audioPath,
      outputDir,
      config: this.config,
      approach: "scripts-dedicados-sem-downloads-repetitivos"
    });

    const execAsync = promisify(exec);
    
    // CORRE√á√ÉO FUNDAMENTAL 1: Nome correto do script
    // Esta era uma das principais causas de falha - usar nome incorreto
    const scriptPath = path.join(process.cwd(), "python", "transcription.py");

    try {
      // ETAPA 1: Verifica√ß√µes pedag√≥gicas iniciais
      // Como um professor que verifica se os alunos trouxeram o material necess√°rio
      await this.validateEnvironment(scriptPath, audioPath);

      // ETAPA 2: Executar transcri√ß√£o inteligente
      // Aqui usamos scripts dedicados em vez de comandos inline problem√°ticos
      const startTime = Date.now();
      const result = await this.executeFreeTranscription(execAsync, scriptPath, audioPath, outputDir);
      const duration = (Date.now() - startTime) / 1000;

      // ETAPA 3: Processar e validar resultado
      const transcription = this.processTranscriptionResult(result, duration, videoId);

      this.logger.info("‚úÖ Transcri√ß√£o educativa conclu√≠da com sucesso", {
        videoId,
        durationSeconds: duration,
        processingType: result.processing_type,
        diarizationAvailable: result.diarization_available,
        textLength: transcription.length,
        wordsEstimated: transcription.split(/\s+/).length
      });

      return transcription;

    } catch (error: any) {
      this.logger.error("‚ùå Transcri√ß√£o principal falhou, iniciando recupera√ß√£o inteligente", {
        videoId,
        error: error.message,
        stack: error.stack,
        nextStep: "Tentaremos m√©todos de fallback progressivamente mais simples"
      });
      
      // FILOSOFIA DE RECUPERA√á√ÉO: Nunca desistir no primeiro erro
      // Em vez disso, tentar m√©todos progressivamente mais simples
      return await this.attemptEducationalFallback(audioPath, videoId);
    }
  }

  /**
   * M√âTODO DE VALIDA√á√ÉO: validateEnvironment
   * 
   * Este m√©todo funciona como um "checklist pr√©-voo" - verifica se tudo
   * est√° no lugar correto antes de come√ßar o processo principal.
   * 
   * FILOSOFIA: Falhar rapidamente e com mensagens claras √© melhor
   * que falhar depois de 20 minutos de processamento.
   */
  private async validateEnvironment(scriptPath: string, audioPath: string): Promise<void> {
    // VERIFICA√á√ÉO 1: Script Python existe?
    // Esta verifica√ß√£o evita 90% dos problemas de "arquivo n√£o encontrado"
    const scriptExists = await fs.access(scriptPath).then(() => true).catch(() => false);
    if (!scriptExists) {
      throw new Error(`‚ùå Script educativo n√£o encontrado: ${scriptPath}. 
      
      SOLU√á√ÉO: Certifique-se de que o arquivo 'transcription.py' est√° na pasta 'python/' do seu projeto.
      
      ESTRUTURA ESPERADA:
      seu-projeto/
      ‚îú‚îÄ‚îÄ python/
      ‚îÇ   ‚îî‚îÄ‚îÄ transcription.py  ‚Üê Este arquivo deve existir
      ‚îî‚îÄ‚îÄ src/
          ‚îî‚îÄ‚îÄ seu-arquivo.ts`);
    }

    // VERIFICA√á√ÉO 2: Arquivo de √°udio existe e √© v√°lido?
    const audioExists = await fs.access(audioPath).then(() => true).catch(() => false);
    if (!audioExists) {
      throw new Error(`‚ùå Arquivo de √°udio n√£o encontrado: ${audioPath}`);
    }

    // VERIFICA√á√ÉO 3: Arquivo n√£o est√° vazio?
    // √Åudios vazios causam problemas confusos mais tarde, melhor detectar agora
    const audioStats = await fs.stat(audioPath);
    if (audioStats.size === 0) {
      throw new Error("‚ùå Arquivo de √°udio est√° vazio (0 bytes)");
    }

    // VERIFICA√á√ÉO 4: Arquivo n√£o √© muito pequeno (prov√°vel erro)?
    if (audioStats.size < 1024) { // Menos de 1KB √© suspeito
      this.logger.warn("‚ö†Ô∏è Arquivo de √°udio muito pequeno, pode estar corrompido", {
        fileSizeBytes: audioStats.size
      });
    }

    // Log educativo com informa√ß√µes √∫teis
    const fileSizeMB = (audioStats.size / 1024 / 1024).toFixed(2);
    this.logger.info("‚úÖ Valida√ß√£o de ambiente conclu√≠da", {
      audioPath,
      fileSize: `${fileSizeMB}MB`,
      scriptType: "transcription.py (vers√£o otimizada)",
      explanation: "Todos os pr√©-requisitos foram verificados e est√£o corretos"
    });
  }

  /**
   * M√âTODO PRINCIPAL DE EXECU√á√ÉO: executeFreeTranscription
   * 
   * Este m√©todo executa o script Python de forma otimizada, evitando
   * os problemas de download repetitivo que vimos nos logs anteriores.
   * 
   * DIFEREN√áA FUNDAMENTAL: Em vez de usar 'python -c' com c√≥digo inline,
   * usamos um script dedicado que gerencia eficientemente os recursos.
   */
  private async executeFreeTranscription(
    execAsync: any,
    scriptPath: string,
    audioPath: string,
    outputDir?: string
  ): Promise<TranscriptionResult> {
    this.logger.info("üöÄ Executando transcri√ß√£o otimizada com scripts dedicados...");

    // CONSTRU√á√ÉO INTELIGENTE DO COMANDO
    // Simples e direto: chamamos um script externo em vez de c√≥digo inline complexo
    let command = `python "${scriptPath}" "${audioPath}"`;
    
    if (outputDir) {
      command += ` "${outputDir}"`;
    }

    // CONFIGURA√á√ÉO DE AMBIENTE OTIMIZADA
    // Removemos depend√™ncias desnecess√°rias (como HF_TOKEN) e configuramos
    // encoding corretamente para evitar problemas de caracteres especiais
    const env = { ...process.env };
    env.PYTHONIOENCODING = "utf-8";
    env.LC_ALL = "pt_BR.UTF-8";
    env.LANG = "pt_BR.UTF-8";
    
    // CORRE√á√ÉO FUNDAMENTAL 2: Remover HF_TOKEN
    // O sistema gratuito n√£o precisa de tokens externos
    delete env.HF_TOKEN;

    this.logger.info("üìã Configura√ß√£o de execu√ß√£o preparada", { 
      command: `python transcription.py [arquivo-audio]`,
      environment: "UTF-8, sem tokens externos",
      philosophy: "Scripts dedicados evitam downloads repetitivos"
    });

    // TIMEOUT INTELIGENTE: baseado na configura√ß√£o, mas com limite sensato
    const timeoutMs = this.config.timeoutMinutes! * 60 * 1000;
    
    // EXECU√á√ÉO COM MONITORAMENTO
    const { stdout, stderr } = await execAsync(command, {
      maxBuffer: 1024 * 1024 * 50, // 50MB buffer (generoso para logs detalhados)
      encoding: "buffer",           // Controle manual de encoding
      timeout: timeoutMs,
      env,
    });

    // PROCESSAMENTO EDUCATIVO DE SA√çDAS
    const stdoutText = stdout.toString('utf-8');
    const stderrText = stderr.toString('utf-8');

    // FILOSOFIA DE LOGS: stderr nem sempre √© erro
    // Muitas bibliotecas Python enviam informa√ß√µes para stderr que s√£o apenas informativos
    if (stderrText && stderrText.trim()) {
      // Analisar se √© realmente um erro ou apenas informativo
      const isActualError = stderrText.includes('Error') || 
                           stderrText.includes('Exception') || 
                           stderrText.includes('Failed');
      
      if (isActualError) {
        this.logger.warn("‚ö†Ô∏è Poss√≠vel erro detectado no stderr:", { 
          stderr: stderrText.trim().substring(0, 500) + "..."
        });
      } else {
        this.logger.info("üìä Informa√ß√µes do processo Python:", { 
          info: stderrText.trim().substring(0, 200) + "..."
        });
      }
    }

    // PARSING INTELIGENTE DO RESULTADO JSON
    let result: TranscriptionResult;
    try {
      const cleanedStdout = stdoutText.trim();
      
      // ESTRAT√âGIA 1: Tentar encontrar JSON no final da sa√≠da
      // Scripts Python √†s vezes geram logs antes do resultado final
      const jsonMatch = cleanedStdout.match(/\{[\s\S]*\}$/);
      if (jsonMatch) {
        result = JSON.parse(jsonMatch[0]);
      } else {
        // ESTRAT√âGIA 2: Assumir que toda a sa√≠da √© JSON
        result = JSON.parse(cleanedStdout);
      }
      
      this.logger.info("‚úÖ Resultado JSON processado com sucesso", { 
        status: result.status,
        processingType: result.processing_type,
        diarizationAvailable: result.diarization_available,
        hasText: !!result.text
      });
      
    } catch (e: any) {
      this.logger.error("‚ùå Erro ao processar JSON do script Python:", {
        error: e.message,
        rawOutputPreview: stdoutText.slice(0, 500) + "...",
        suggestion: "Verificando se o script est√° retornando JSON v√°lido"
      });
      
      // RECUPERA√á√ÉO INTELIGENTE: Tentar extrair texto mesmo com JSON malformado
      const textMatch = stdoutText.match(/"text":\s*"([^"]+)"/);
      if (textMatch && textMatch[1]) {
        this.logger.warn("üîß Recupera√ß√£o bem-sucedida: extraindo texto do JSON malformado");
        result = {
          status: "success",
          text: textMatch[1].replace(/\\n/g, '\n').replace(/\\"/g, '"'),
          language: "pt",
          processing_type: "fallback_extraction",
          timestamp: new Date().toISOString(),
          diarization_available: false
        };
      } else {
        throw new Error(`Falha cr√≠tica ao processar sa√≠da do script: ${e.message}`);
      }
    }

    return result;
  }

  /**
   * SISTEMA DE FALLBACK EDUCATIVO: attemptEducationalFallback
   * 
   * Este m√©todo implementa uma estrat√©gia de "degrada√ß√£o graciosa" - quando o m√©todo
   * principal falha, tentamos m√©todos progressivamente mais simples at√© conseguir
   * algum resultado √∫til.
   * 
   * FILOSOFIA PEDAG√ìGICA: √â melhor ter uma transcri√ß√£o imperfeita do que nenhuma transcri√ß√£o.
   * Cada n√≠vel de fallback sacrifica alguma funcionalidade em troca de maior confiabilidade.
   */
  private async attemptEducationalFallback(audioPath: string, videoId: string): Promise<string> {
    this.logger.warn("üîÑ Iniciando recupera√ß√£o educativa em m√∫ltiplas etapas", { 
      videoId,
      strategy: "Fallbacks progressivamente mais simples"
    });
    
    try {
      const execAsync = promisify(exec);
      
      // FALLBACK N√çVEL 1: Tentar o script principal sem diariza√ß√£o
      const fallbackScriptPath = path.join(process.cwd(), "python", "transcription.py");
      const scriptExists = await fs.access(fallbackScriptPath).then(() => true).catch(() => false);
      
      if (scriptExists) {
        try {
          this.logger.info("üéØ Tentativa de fallback n√≠vel 1: script principal simplificado");
          
          const command = `python "${fallbackScriptPath}" "${audioPath}"`;
          
          const env = { ...process.env };
          env.PYTHONIOENCODING = "utf-8";
          env.LC_ALL = "pt_BR.UTF-8";
          env.LANG = "pt_BR.UTF-8";
          delete env.HF_TOKEN;
          
          // Timeout mais conservador para fallback
          const { stdout } = await execAsync(command, {
            timeout: 15 * 60 * 1000, // 15 minutos - menos agressivo que o principal
            encoding: 'utf-8',
            env,
            maxBuffer: 1024 * 1024 * 10 // Buffer menor para economia de recursos
          });
          
          // Processar resposta do fallback n√≠vel 1
          const result = JSON.parse(stdout.trim());
          
          if (result.status === 'success' && result.text) {
            this.logger.info("‚úÖ Fallback n√≠vel 1 bem-sucedido", { 
              videoId, 
              textLength: result.text.length,
              level: "script-principal-simplificado"
            });
            return result.text;
          }
          
        } catch (level1Error: any) {
          this.logger.warn("‚ö†Ô∏è Fallback n√≠vel 1 falhou, tentando n√≠vel 2", {
            videoId,
            error: level1Error.message
          });
        }
      }
      
      // FALLBACK N√çVEL 2: Script tempor√°rio ultra-simples
      return await this.createUltraSimpleFallback(audioPath, videoId);
      
    } catch (error: any) {
      this.logger.error("‚ùå Todos os fallbacks educativos falharam", { 
        videoId, 
        error: error.message,
        recommendation: "Verificar instala√ß√£o das depend√™ncias: pip install openai-whisper pydub numpy"
      });
      throw new Error("Sistema de transcri√ß√£o completamente indispon√≠vel ap√≥s m√∫ltiplas tentativas");
    }
  }

  /**
   * FALLBACK ULTRA-SIMPLES: createUltraSimpleFallback
   * 
   * Este √© o "√∫ltimo recurso" - um script Python extremamente simples que usa
   * apenas o Whisper b√°sico, sem nenhuma funcionalidade avan√ßada.
   * 
   * FILOSOFIA: Quando tudo mais falha, volte ao b√°sico absoluto.
   */
  private async createUltraSimpleFallback(audioPath: string, videoId: string): Promise<string> {
    this.logger.warn("üÜò Ativando fallback ultra-simples (√∫ltimo recurso)", { 
      videoId,
      approach: "Script tempor√°rio com Whisper b√°sico"
    });
    
    try {
      const execAsync = promisify(exec);
      
      // SCRIPT PYTHON M√çNIMO
      // Este script √© t√£o simples quanto poss√≠vel - apenas Whisper b√°sico
      const tempScriptContent = `
import whisper
import sys
import os

def main():
    try:
        # Log pedag√≥gico para debugging
        print("üîß Fallback ultra-simples iniciado...", file=sys.stderr)
        
        # Usar modelo pequeno para ser mais r√°pido e usar menos recursos
        print("üì¶ Carregando modelo Whisper small (mais r√°pido)...", file=sys.stderr)
        model = whisper.load_model('small', device='cpu')
        
        # Transcri√ß√£o com configura√ß√µes m√≠nimas
        print("üéµ Iniciando transcri√ß√£o b√°sica...", file=sys.stderr)
        audio_file = sys.argv[1]
        result = model.transcribe(
            audio_file, 
            language='pt',      # For√ßar portugu√™s
            task='transcribe',  # Apenas transcrever, sem traduzir
            verbose=False,      # Sem logs excessivos
            fp16=False         # Evitar problemas de precis√£o em CPU
        )
        
        # Extrair e validar texto
        text = result['text'].strip()
        if text and len(text) > 5:  # Pelo menos 5 caracteres
            print(text)  # Output simples para stdout
        else:
            print("Erro: Transcri√ß√£o resultou em texto vazio ou muito curto", file=sys.stderr)
            sys.exit(1)
            
    except Exception as e:
        print(f"Erro cr√≠tico no fallback: {str(e)}", file=sys.stderr)
        sys.exit(1)

if __name__ == "__main__":
    main()
`;
      
      // Criar arquivo tempor√°rio com nome √∫nico
      const tempScriptPath = `/tmp/whisper_emergency_${videoId}_${Date.now()}.py`;
      await fs.writeFile(tempScriptPath, tempScriptContent, 'utf-8');
      
      try {
        this.logger.info("üöÄ Executando script de emerg√™ncia", {
          videoId,
          scriptPath: tempScriptPath,
          timeout: "8 minutos (conservador)"
        });
        
        // Executar com timeout muito conservador
        const { stdout, stderr } = await execAsync(`python "${tempScriptPath}" "${audioPath}"`, {
          timeout: 8 * 60 * 1000, // 8 minutos - bem conservador
          encoding: 'utf-8'
        });
        
        // Log informativo do stderr
        if (stderr && stderr.trim()) {
          this.logger.info("üìã Logs do script de emerg√™ncia:", {
            logs: stderr.trim()
          });
        }
        
        // Processar resultado
        const text = stdout.trim();
        if (text && text.length > 10 && !text.startsWith('Erro:')) {
          this.logger.info("‚úÖ Fallback ultra-simples funcionou!", { 
            videoId, 
            textLength: text.length,
            success: "Transcri√ß√£o b√°sica completada"
          });
          return text;
        } else {
          throw new Error(`Script de emerg√™ncia retornou resultado inv√°lido: ${text}`);
        }
        
      } finally {
        // LIMPEZA PEDAG√ìGICA: Sempre limpar arquivos tempor√°rios
        try {
          await fs.unlink(tempScriptPath);
          this.logger.info("üßπ Script tempor√°rio removido", { tempScriptPath });
        } catch (cleanupError) {
          this.logger.warn("‚ö†Ô∏è Falha ao remover script tempor√°rio", { 
            tempScriptPath, 
            error: cleanupError 
          });
        }
      }
      
    } catch (error: any) {
      this.logger.error("üí• Fallback ultra-simples tamb√©m falhou completamente", { 
        videoId, 
        error: error.message,
        diagnosis: "Poss√≠vel problema com instala√ß√£o do Whisper ou depend√™ncias b√°sicas"
      });
      throw new Error(`Falha total do sistema de transcri√ß√£o: ${error.message}`);
    }
  }

  /**
   * PROCESSAMENTO DE RESULTADO: processTranscriptionResult
   * 
   * Este m√©todo valida e processa o resultado final da transcri√ß√£o,
   * garantindo que temos dados √∫teis antes de retornar para o usu√°rio.
   */
  private processTranscriptionResult(
    result: TranscriptionResult, 
    duration: number, 
    videoId: string
  ): string {
    if (result.status === "error") {
      throw new Error(result.error || "Erro desconhecido na transcri√ß√£o");
    }

    if (!result.text || !result.text.trim()) {
      throw new Error("Transcri√ß√£o retornou texto vazio");
    }

    // AN√ÅLISE PEDAG√ìGICA DO RESULTADO
    const words = result.text.split(/\s+/);
    const sentences = result.text.split(/[.!?]+/).filter(s => s.trim().length > 0);
    
    this.logger.info("üìä An√°lise completa do resultado da transcri√ß√£o", {
      videoId,
      performance: {
        durationSeconds: duration,
        textLength: result.text.length,
        wordsEstimated: words.length,
        sentencesEstimated: sentences.length,
        averageWordsPerSentence: sentences.length > 0 ? (words.length / sentences.length).toFixed(1) : 0
      },
      technical: {
        processingType: result.processing_type,
        diarizationUsed: result.diarization_available,
        language: result.language || 'pt'
      },
      quality: {
        hasReasonableLength: result.text.length > 50,
        hasMultipleWords: words.length > 10,
        seemsValid: !result.text.includes('Error:') && !result.text.includes('Erro:')
      }
    });

    return result.text;
  }

  // M√âTODOS DE CONFIGURA√á√ÉO E UTILIT√ÅRIOS

  public updateConfig(newConfig: Partial<TranscriptionConfig>): void {
    this.config = { ...this.config, ...newConfig };
    this.logger.info("‚öôÔ∏è Configura√ß√£o atualizada", { 
      newConfig: this.config,
      note: "Mudan√ßas aplicadas para pr√≥ximas execu√ß√µes"
    });
  }

  public getConfig(): TranscriptionConfig {
    return { ...this.config };
  }

  /**
   * VERIFICA√á√ÉO DE SISTEMA EDUCATIVA: checkSystemStatus
   * 
   * Este m√©todo funciona como um "diagn√≥stico m√©dico" do sistema,
   * verificando cada componente e reportando o estado geral.
   */
  public async checkSystemStatus(): Promise<{
    pythonAvailable: boolean;
    scriptAvailable: boolean;
    whisperAvailable: boolean;
    diarizationAvailable: boolean;
    ffmpegAvailable: boolean;
    memoryUsage: number;
    cpuCores: number;
    estimatedPerformance: string;
    recommendations: string[];
  }> {
    this.logger.info("üîç Iniciando diagn√≥stico completo do sistema...");
    
    try {
      const execAsync = promisify(exec);
      const recommendations: string[] = [];
      
      // VERIFICA√á√ÉO 1: Python
      const pythonAvailable = await execAsync('python --version')
        .then((result) => {
          this.logger.info("‚úÖ Python detectado", { version: result.stdout.trim() });
          return true;
        })
        .catch(() => {
          recommendations.push("Instalar Python 3.7 ou superior");
          return false;
        });
      
      // VERIFICA√á√ÉO 2: Script principal
      const scriptPath = path.join(process.cwd(), "python", "transcription.py");
      const scriptAvailable = await fs.access(scriptPath)
        .then(() => {
          this.logger.info("‚úÖ Script principal encontrado", { path: scriptPath });
          return true;
        })
        .catch(() => {
          recommendations.push("Adicionar arquivo transcription.py na pasta python/");
          return false;
        });
      
      // VERIFICA√á√ÉO 3: Whisper
      let whisperAvailable = false;
      if (pythonAvailable) {
        whisperAvailable = await execAsync('python -c "import whisper; print(whisper.__version__)"')
          .then((result) => {
            this.logger.info("‚úÖ Whisper instalado", { version: result.stdout.trim() });
            return true;
          })
          .catch(() => {
            recommendations.push("Instalar Whisper: pip install openai-whisper");
            return false;
          });
      }
      
      // VERIFICA√á√ÉO 4: Depend√™ncias da diariza√ß√£o
      let diarizationAvailable = false;
      if (pythonAvailable) {
        diarizationAvailable = await execAsync('python -c "import pydub, numpy; print(\'OK\')"')
          .then(() => {
            this.logger.info("‚úÖ Depend√™ncias de diariza√ß√£o dispon√≠veis");
            return true;
          })
          .catch(() => {
            recommendations.push("Instalar depend√™ncias: pip install pydub numpy");
            return false;
          });
      }
      
      // VERIFICA√á√ÉO 5: FFmpeg
      const ffmpegAvailable = await execAsync('ffmpeg -version')
        .then(() => {
          this.logger.info("‚úÖ FFmpeg detectado");
          return true;
        })
        .catch(() => {
          recommendations.push("Instalar FFmpeg para processamento de √°udio");
          return false;
        });
      
      // AN√ÅLISE DE RECURSOS DO SISTEMA
      const memoryUsage = process.memoryUsage().heapUsed / 1024 / 1024; // MB
      const cpuCores = require('os').cpus().length;
      
      // ESTIMATIVA DE PERFORMANCE EDUCATIVA
      let estimatedPerformance = "unknown";
      let performanceExplanation = "";
      
      if (whisperAvailable && diarizationAvailable && ffmpegAvailable) {
        if (cpuCores >= 8) {
          estimatedPerformance = "excellent";
          performanceExplanation = "Sistema otimizado para processamento r√°pido";
        } else if (cpuCores >= 4) {
          estimatedPerformance = "good";
          performanceExplanation = "Desempenho adequado para maioria dos casos";
        } else {
          estimatedPerformance = "basic";
          performanceExplanation = "Funcional, mas pode ser lento para √°udios longos";
          recommendations.push("Considerar mais CPUs para melhor performance");
        }
      } else {
        estimatedPerformance = "limited";
        performanceExplanation = "Depend√™ncias faltando limitam funcionalidade";
      }
      
      // RELAT√ìRIO FINAL
      const status = {
        pythonAvailable,
        scriptAvailable,
        whisperAvailable,
        diarizationAvailable,
        ffmpegAvailable,
        memoryUsage: Math.round(memoryUsage * 100) / 100,
        cpuCores,
        estimatedPerformance,
        recommendations
      };
      
      this.logger.info("üìã Diagn√≥stico do sistema completo", {
        status,
        explanation: performanceExplanation,
        readyForProduction: whisperAvailable && scriptAvailable && ffmpegAvailable
      });
      
      return status;
      
    } catch (error: any) {
      this.logger.error("‚ùå Erro durante diagn√≥stico do sistema", { error: error.message });
      return {
        pythonAvailable: false,
        scriptAvailable: false,
        whisperAvailable: false,
        diarizationAvailable: false,
        ffmpegAvailable: false,
        memoryUsage: 0,
        cpuCores: 0,
        estimatedPerformance: "error",
        recommendations: ["Investigar problemas de configura√ß√£o do ambiente"]
      };
    }
  }

  /**
   * TESTE EDUCATIVO: testTranscription
   * 
   * M√©todo para testar rapidamente se o sistema est√° funcionando
   * sem precisar processar um √°udio real.
   */
  public async testTranscription(): Promise<boolean> {
    try {
      this.logger.info("üß™ Executando teste r√°pido do sistema de transcri√ß√£o...");
      
      const execAsync = promisify(exec);
      
      // Teste simples: verificar se conseguimos importar as bibliotecas essenciais
      await execAsync('python -c "import whisper, pydub, numpy; print(\'‚úÖ Bibliotecas essenciais OK\')"', {
        timeout: 30000 // 30 segundos
      });
      
      this.logger.info("‚úÖ Teste de transcri√ß√£o passou - sistema pronto para uso");
      return true;
      
    } catch (error: any) {
      this.logger.error("‚ùå Teste de transcri√ß√£o falhou", { 
        error: error.message,
        suggestion: "Verificar instala√ß√£o das depend√™ncias"
      });
      return false;
    }
  }
}