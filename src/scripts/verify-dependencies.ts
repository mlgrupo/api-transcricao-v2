import { AppDataSource } from "../data/data-source";
import { Logger } from "../utils/logger";
import { Application } from "../application";

/**
 * Script para verificar depend√™ncias do sistema
 */
async function verifyDependencies() {
  const logger = new Logger();
  logger.info("üîç Verificando depend√™ncias do sistema...");

  try {
    // Verificar banco de dados
    logger.info("Inicializando conex√£o com o banco de dados...");
    if (!AppDataSource.isInitialized) {
      await AppDataSource.initialize();
    }
    logger.info("‚úÖ Banco de dados conectado com sucesso");

    // Inicializar a aplica√ß√£o
    logger.info("Inicializando aplica√ß√£o...");
    const app = await Application.getInstance();
    await app.initialize();
    logger.info("‚úÖ Aplica√ß√£o inicializada com sucesso");

    // Verificar servi√ßos principais
    const videoService = app.videoService;
    const transcriptionService = app.transcriptionService;
    
    logger.info("Verificando inje√ß√£o de depend√™ncias...");
    if (!videoService) {
      throw new Error("VideoService n√£o est√° inicializado");
    }
    if (!transcriptionService) {
      throw new Error("TranscriptionService n√£o est√° inicializado");
    }

    // Verificar que VideoService tem acesso ao TranscriptionService
    // Esta verifica√ß√£o √© indireta, j√° que n√£o podemos acessar campos privados
    try {
      logger.info("Testando acesso do VideoService ao TranscriptionService...");
      const videoId = "test-video-id";
      // Criar um mock do m√©todo resetQueueStatus
      const originalMethod = videoService.resetQueueStatus;
      let transcriptionServiceAccessed = false;
      
      videoService.resetQueueStatus = async (id: string) => {
        if (id === videoId) {
          transcriptionServiceAccessed = true;
          return { 
            success: true, 
            message: "Teste de depend√™ncia bem-sucedido" 
          };
        }
        return originalMethod.call(videoService, id);
      };
      
      await videoService.resetQueueStatus(videoId);
      
      // Restaurar o m√©todo original
      videoService.resetQueueStatus = originalMethod;
      
      if (transcriptionServiceAccessed) {
        logger.info("‚úÖ VideoService tem acesso ao TranscriptionService");
      } else {
        logger.warn("‚ö†Ô∏è N√£o foi poss√≠vel confirmar se VideoService tem acesso ao TranscriptionService");
      }
    } catch (error: any) {
      logger.error("‚ùå Erro ao testar acesso do VideoService ao TranscriptionService:", error);
    }

    // Verificar Python e depend√™ncias
    logger.info("Verificando ambiente Python...");
    const pythonStatus = await app.videoRepository.checkTranscriptionSystem();
    
    if (pythonStatus.pythonAvailable) {
      logger.info("‚úÖ Python dispon√≠vel");
    } else {
      logger.warn("‚ö†Ô∏è Python n√£o encontrado. Verifique a instala√ß√£o do Python");
    }
    
    if (pythonStatus.scriptAvailable) {
      logger.info("‚úÖ Script de transcri√ß√£o encontrado");
    } else {
      logger.warn("‚ö†Ô∏è Script de transcri√ß√£o n√£o encontrado. Verifique o arquivo python/transcribe.py");
    }
    
    if (pythonStatus.whisperAvailable) {
      logger.info("‚úÖ Biblioteca Whisper dispon√≠vel");
    } else {
      logger.warn("‚ö†Ô∏è Biblioteca Whisper n√£o encontrada. Execute install-dependencies.bat");
    }

    logger.info("‚úÖ Verifica√ß√£o de depend√™ncias conclu√≠da");
    
  } catch (error: any) {
    logger.error("‚ùå Falha na verifica√ß√£o de depend√™ncias:", error);
  } finally {
    if (AppDataSource.isInitialized) {
      await AppDataSource.destroy();
    }
  }
}

// Executar script se for o arquivo principal
if (require.main === module) {
  verifyDependencies()
    .then(() => {
      console.log("‚ú® Script de verifica√ß√£o conclu√≠do");
      process.exit(0);
    })
    .catch(error => {
      console.error("‚ùå Erro:", error);
      process.exit(1);
    });
}
