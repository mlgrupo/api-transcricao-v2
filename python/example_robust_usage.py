#!/usr/bin/env python3
"""
Exemplo de Uso da Arquitetura Robusta
Demonstra diferentes cen√°rios de uso da arquitetura de diariza√ß√£o
"""

import os
import time
import tempfile
from pathlib import Path
import structlog

# Importar componentes
from diarization_orchestrator import DiarizationOrchestrator, OrchestratorConfig
from resource_manager import JobPriority

# Configurar logging
structlog.configure(
    processors=[
        structlog.stdlib.filter_by_level,
        structlog.stdlib.add_logger_name,
        structlog.stdlib.add_log_level,
        structlog.stdlib.PositionalArgumentsFormatter(),
        structlog.processors.TimeStamper(fmt="iso"),
        structlog.processors.StackInfoRenderer(),
        structlog.processors.format_exc_info,
        structlog.processors.UnicodeDecoder(),
        structlog.processors.JSONRenderer()
    ],
    context_class=dict,
    logger_factory=structlog.stdlib.LoggerFactory(),
    wrapper_class=structlog.stdlib.BoundLogger,
    cache_logger_on_first_use=True,
)

logger = structlog.get_logger()

def example_single_file_processing():
    """Exemplo: Processamento de arquivo √∫nico"""
    print("\nüéØ EXEMPLO 1: Processamento de Arquivo √önico")
    print("=" * 50)
    
    # Configurar orquestrador para arquivo √∫nico
    config = OrchestratorConfig(
        max_concurrent_jobs=1,
        chunk_duration=30.0,
        chunk_overlap=5.0,
        whisper_model="large-v3",
        max_speakers=8
    )
    
    # Criar diret√≥rio tempor√°rio para exemplo
    with tempfile.TemporaryDirectory() as temp_dir:
        # Simular arquivo de √°udio (voc√™ substituiria pelo caminho real)
        audio_file = "caminho/para/seu/audio.mp4"  # Substitua pelo arquivo real
        
        if not os.path.exists(audio_file):
            print(f"‚ö†Ô∏è Arquivo n√£o encontrado: {audio_file}")
            print("   Crie um arquivo de √°udio para testar ou modifique o caminho")
            return
        
        output_dir = Path(temp_dir) / "single_file_output"
        
        print(f"üìÅ Arquivo de entrada: {audio_file}")
        print(f"üìÅ Diret√≥rio de sa√≠da: {output_dir}")
        
        # Processar com orquestrador
        with DiarizationOrchestrator(config) as orchestrator:
            # Submeter job
            job_id = orchestrator.process_file(audio_file, str(output_dir))
            print(f"üÜî Job ID: {job_id}")
            
            # Monitorar progresso
            while True:
                status = orchestrator.get_job_status(job_id)
                if status:
                    progress = status.get("progress", {})
                    print(f"üìä Progresso: {progress.get('percent', 0)}% - {progress.get('message', 'Processando...')}")
                    
                    if status["status"] in ["completed", "failed"]:
                        break
                
                time.sleep(5)
            
            # Verificar resultado
            if status["status"] == "completed":
                print("‚úÖ Processamento conclu√≠do com sucesso!")
                
                # Listar arquivos de sa√≠da
                output_files = list(output_dir.glob("*"))
                print("üìÑ Arquivos gerados:")
                for file in output_files:
                    print(f"   - {file.name}")
                
                # Mostrar estat√≠sticas
                system_status = orchestrator.get_system_status()
                print(f"üìà Estat√≠sticas:")
                print(f"   - Jobs processados: {system_status['orchestrator_stats']['total_jobs_processed']}")
                print(f"   - Tempo m√©dio: {system_status['orchestrator_stats']['average_processing_time']:.2f}s")
            else:
                print(f"‚ùå Processamento falhou: {status.get('error', 'Erro desconhecido')}")

def example_concurrent_processing():
    """Exemplo: Processamento concorrente de m√∫ltiplos arquivos"""
    print("\nüéØ EXEMPLO 2: Processamento Concorrente")
    print("=" * 50)
    
    # Configurar orquestrador para processamento concorrente
    config = OrchestratorConfig(
        max_concurrent_jobs=2,  # Processar 2 arquivos simultaneamente
        chunk_duration=30.0,
        chunk_overlap=5.0,
        whisper_model="large-v3",
        max_speakers=8
    )
    
    # Lista de arquivos para processar (substitua pelos caminhos reais)
    audio_files = [
        "caminho/para/audio1.mp4",
        "caminho/para/audio2.mp4",
        "caminho/para/audio3.mp4"
    ]
    
    # Filtrar arquivos existentes
    existing_files = [f for f in audio_files if os.path.exists(f)]
    
    if not existing_files:
        print("‚ö†Ô∏è Nenhum arquivo encontrado para processamento")
        print("   Modifique a lista 'audio_files' com caminhos v√°lidos")
        return
    
    print(f"üìÅ Arquivos para processar: {len(existing_files)}")
    for file in existing_files:
        print(f"   - {file}")
    
    with tempfile.TemporaryDirectory() as temp_dir:
        with DiarizationOrchestrator(config) as orchestrator:
            # Submeter todos os jobs
            job_ids = []
            for i, audio_file in enumerate(existing_files):
                output_dir = Path(temp_dir) / f"concurrent_output_{i}"
                job_id = orchestrator.process_file(audio_file, str(output_dir))
                job_ids.append(job_id)
                print(f"üÜî Job {i+1} ID: {job_id}")
            
            # Monitorar progresso de todos os jobs
            completed_jobs = 0
            start_time = time.time()
            
            while completed_jobs < len(job_ids):
                completed_jobs = 0
                
                for i, job_id in enumerate(job_ids):
                    status = orchestrator.get_job_status(job_id)
                    if status:
                        progress = status.get("progress", {})
                        print(f"üìä Job {i+1}: {progress.get('percent', 0)}% - {progress.get('message', 'Processando...')}")
                        
                        if status["status"] in ["completed", "failed"]:
                            completed_jobs += 1
                
                if completed_jobs < len(job_ids):
                    print(f"‚è≥ Aguardando... ({completed_jobs}/{len(job_ids)} completados)")
                    time.sleep(10)
            
            # Relat√≥rio final
            total_time = time.time() - start_time
            print(f"\n‚úÖ Processamento concorrente conclu√≠do em {total_time:.2f}s")
            
            # Estat√≠sticas finais
            system_status = orchestrator.get_system_status()
            print(f"üìà Estat√≠sticas finais:")
            print(f"   - Jobs processados: {system_status['orchestrator_stats']['total_jobs_processed']}")
            print(f"   - Jobs bem-sucedidos: {system_status['orchestrator_stats']['successful_jobs']}")
            print(f"   - Jobs falharam: {system_status['orchestrator_stats']['failed_jobs']}")
            print(f"   - Tempo m√©dio por job: {system_status['orchestrator_stats']['average_processing_time']:.2f}s")

def example_priority_processing():
    """Exemplo: Processamento com prioridades"""
    print("\nüéØ EXEMPLO 3: Processamento com Prioridades")
    print("=" * 50)
    
    config = OrchestratorConfig(
        max_concurrent_jobs=1,  # Processar um por vez para demonstrar prioridades
        chunk_duration=30.0,
        chunk_overlap=5.0,
        whisper_model="large-v3"
    )
    
    # Lista de arquivos com diferentes prioridades
    files_with_priority = [
        ("caminho/para/audio_baixa_prioridade.mp4", JobPriority.LOW),
        ("caminho/para/audio_alta_prioridade.mp4", JobPriority.HIGH),
        ("caminho/para/audio_normal.mp4", JobPriority.NORMAL)
    ]
    
    # Filtrar arquivos existentes
    existing_files = [(f, p) for f, p in files_with_priority if os.path.exists(f)]
    
    if not existing_files:
        print("‚ö†Ô∏è Nenhum arquivo encontrado para processamento")
        return
    
    print("üìÅ Arquivos com prioridades:")
    for file, priority in existing_files:
        print(f"   - {file} (Prioridade: {priority.name})")
    
    with tempfile.TemporaryDirectory() as temp_dir:
        with DiarizationOrchestrator(config) as orchestrator:
            # Submeter jobs com prioridades
            job_ids = []
            for i, (audio_file, priority) in enumerate(existing_files):
                output_dir = Path(temp_dir) / f"priority_output_{i}"
                job_id = orchestrator.submit_job(audio_file, str(output_dir), priority)
                job_ids.append(job_id)
                print(f"üÜî Job {i+1} (Prioridade: {priority.name}) ID: {job_id}")
            
            # Monitorar processamento
            completed_jobs = 0
            while completed_jobs < len(job_ids):
                for i, job_id in enumerate(job_ids):
                    status = orchestrator.get_job_status(job_id)
                    if status and status["status"] in ["completed", "failed"]:
                        completed_jobs += 1
                        priority_name = existing_files[i][1].name
                        print(f"‚úÖ Job {i+1} ({priority_name}) {status['status']}")
                
                if completed_jobs < len(job_ids):
                    time.sleep(5)
            
            print("‚úÖ Processamento com prioridades conclu√≠do!")

def example_monitoring_and_metrics():
    """Exemplo: Monitoramento e m√©tricas em tempo real"""
    print("\nüéØ EXEMPLO 4: Monitoramento e M√©tricas")
    print("=" * 50)
    
    config = OrchestratorConfig(
        max_concurrent_jobs=2,
        enable_monitoring=True,
        log_interval=10  # Log a cada 10 segundos
    )
    
    # Simular arquivo (substitua pelo caminho real)
    audio_file = "caminho/para/audio_monitoramento.mp4"
    
    if not os.path.exists(audio_file):
        print(f"‚ö†Ô∏è Arquivo n√£o encontrado: {audio_file}")
        return
    
    with tempfile.TemporaryDirectory() as temp_dir:
        with DiarizationOrchestrator(config) as orchestrator:
            # Submeter job
            output_dir = Path(temp_dir) / "monitoring_output"
            job_id = orchestrator.process_file(audio_file, str(output_dir))
            
            print(f"üÜî Job ID: {job_id}")
            print("üìä Monitoramento em tempo real:")
            
            # Monitorar por 60 segundos ou at√© completar
            start_time = time.time()
            while time.time() - start_time < 60:
                # Status do job
                job_status = orchestrator.get_job_status(job_id)
                if job_status and job_status["status"] in ["completed", "failed"]:
                    print(f"‚úÖ Job {job_status['status']}")
                    break
                
                # Status do sistema
                system_status = orchestrator.get_system_status()
                resource_status = system_status["resource_manager"]
                
                print(f"‚è∞ {time.strftime('%H:%M:%S')} - "
                      f"RAM: {resource_status['memory']['used_gb']:.1f}GB "
                      f"CPU: {resource_status['cpu']['percent']:.1f}% "
                      f"Jobs ativos: {system_status['active_jobs']}")
                
                time.sleep(10)
            
            # Relat√≥rio final
            final_status = orchestrator.get_system_status()
            print(f"\nüìà Relat√≥rio Final:")
            print(f"   - Pico de mem√≥ria: {final_status['orchestrator_stats']['peak_memory_usage']:.2f}GB")
            print(f"   - Jobs processados: {final_status['orchestrator_stats']['total_jobs_processed']}")
            print(f"   - Tempo total: {final_status['orchestrator_stats']['total_processing_time']:.2f}s")

def example_error_handling():
    """Exemplo: Tratamento de erros"""
    print("\nüéØ EXEMPLO 5: Tratamento de Erros")
    print("=" * 50)
    
    config = OrchestratorConfig(
        max_concurrent_jobs=1,
        enable_recovery=True
    )
    
    with tempfile.TemporaryDirectory() as temp_dir:
        # Criar arquivo inv√°lido para testar tratamento de erro
        invalid_file = Path(temp_dir) / "invalid_audio.txt"
        with open(invalid_file, 'w') as f:
            f.write("Este n√£o √© um arquivo de √°udio v√°lido")
        
        with DiarizationOrchestrator(config) as orchestrator:
            # Submeter job com arquivo inv√°lido
            output_dir = Path(temp_dir) / "error_test_output"
            job_id = orchestrator.process_file(str(invalid_file), str(output_dir))
            
            print(f"üÜî Job ID: {job_id}")
            print("‚ö†Ô∏è Processando arquivo inv√°lido para testar tratamento de erro...")
            
            # Aguardar conclus√£o
            while True:
                status = orchestrator.get_job_status(job_id)
                if status and status["status"] in ["completed", "failed"]:
                    break
                time.sleep(5)
            
            # Verificar tratamento de erro
            if status["status"] == "failed":
                print("‚úÖ Tratamento de erro funcionou corretamente!")
                print(f"   Erro: {status.get('error', 'Erro desconhecido')}")
                
                # Verificar se o sistema continua funcionando
                system_status = orchestrator.get_system_status()
                print(f"   Sistema continua funcionando: {system_status['active_jobs']} jobs ativos")
            else:
                print("‚ùå Erro n√£o foi tratado corretamente")

def main():
    """Fun√ß√£o principal com menu de exemplos"""
    print("üéØ ARQUITETURA ROBUSTA DE DIARIZA√á√ÉO")
    print("=" * 50)
    print("Exemplos de uso dispon√≠veis:")
    print("1. Processamento de arquivo √∫nico")
    print("2. Processamento concorrente")
    print("3. Processamento com prioridades")
    print("4. Monitoramento e m√©tricas")
    print("5. Tratamento de erros")
    print("6. Executar todos os exemplos")
    print("0. Sair")
    
    while True:
        try:
            choice = input("\nEscolha um exemplo (0-6): ").strip()
            
            if choice == "0":
                print("üëã Saindo...")
                break
            elif choice == "1":
                example_single_file_processing()
            elif choice == "2":
                example_concurrent_processing()
            elif choice == "3":
                example_priority_processing()
            elif choice == "4":
                example_monitoring_and_metrics()
            elif choice == "5":
                example_error_handling()
            elif choice == "6":
                print("\nüöÄ Executando todos os exemplos...")
                example_single_file_processing()
                example_concurrent_processing()
                example_priority_processing()
                example_monitoring_and_metrics()
                example_error_handling()
                print("\n‚úÖ Todos os exemplos executados!")
            else:
                print("‚ùå Op√ß√£o inv√°lida. Escolha 0-6.")
        
        except KeyboardInterrupt:
            print("\nüëã Interrompido pelo usu√°rio.")
            break
        except Exception as e:
            print(f"‚ùå Erro: {e}")

if __name__ == "__main__":
    main() 