#!/usr/bin/env python3
"""
Sistema de Transcri√ß√£o EQUILIBRADO - Qualidade m√°xima + Anti-timeout
FOCO: Fidelidade da transcri√ß√£o, fallbacks apenas quando necess√°rio
"""
import sys
import json
import logging
import whisper
import os
import tempfile
from pathlib import Path
from typing import Dict, Optional, List
from datetime import datetime
import re
import signal
import time
from diarization import diarize_audio, DiarizationSegment

# Processamento de √°udio
from pydub import AudioSegment
from pydub.effects import normalize
import numpy as np

# Processamento de texto
try:
    from text_processor import TextProcessor, TextProcessingRules
except ImportError:
    # Fallback se m√≥dulo n√£o existir
    class TextProcessor:
        def __init__(self, rules): pass
        def process(self, text): return text
    class TextProcessingRules:
        def __init__(self, **kwargs): pass

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class TimeoutException(Exception):
    pass

def timeout_handler(signum, frame):
    raise TimeoutException("Timeout no processamento")

class AudioPreprocessor:
    def __init__(self):
        self.sample_rate = 16000
        self.channels = 1
    
    def normalize_audio(self, audio: AudioSegment) -> AudioSegment:
        try:
            return normalize(audio)
        except Exception as e:
            logger.warning(f"Erro na normaliza√ß√£o: {e}")
            return audio
    
    def convert_format(self, audio: AudioSegment) -> AudioSegment:
        try:
            if audio.frame_rate != self.sample_rate:
                audio = audio.set_frame_rate(self.sample_rate)
            if audio.channels != self.channels:
                audio = audio.set_channels(self.channels)
            return audio
        except Exception as e:
            logger.warning(f"Erro na convers√£o de formato: {e}")
            return audio
    
    def enhance_audio(self, audio: AudioSegment) -> AudioSegment:
        """Melhorias balanceadas para qualidade"""
        try:
            # Aplicar melhorias que comprovadamente ajudam na transcri√ß√£o
            audio = normalize(audio, headroom=0.1)
            
            # Com recursos dispon√≠veis, aplicar filtro suave de ru√≠do
            # Aumentar ligeiramente o ganho se √°udio estiver muito baixo
            if audio.dBFS < -30:
                audio = audio + (25 - abs(audio.dBFS))
                
            return audio
        except Exception as e:
            logger.warning(f"Erro no melhoramento de √°udio: {e}")
            return audio
    
    def process(self, audio: AudioSegment) -> AudioSegment:
        logger.info("Iniciando pr√©-processamento avan√ßado de √°udio...")
        original_duration = len(audio)
        audio = self.normalize_audio(audio)
        audio = self.convert_format(audio)
        audio = self.enhance_audio(audio)
        final_duration = len(audio)
        logger.info(f"Pr√©-processamento conclu√≠do: {original_duration}ms -> {final_duration}ms")
        return audio

class TextPostProcessor:
    def __init__(self):
        try:
            self.text_processor = TextProcessor(TextProcessingRules(
                capitalize_sentences=True,
                fix_spaces=True,
                ensure_final_punctuation=True,
                normalize_numbers=True,
                fix_common_errors=True,
                normalize_punctuation=True
            ))
        except Exception as e:
            logger.warning(f"Erro ao inicializar text_processor: {e}")
            self.text_processor = None
    
    def clean_text(self, text: str) -> str:
        if not text or not text.strip():
            return ""
        
        try:
            if self.text_processor:
                text = self.text_processor.process(text)
        except Exception as e:
            logger.warning(f"Erro no processamento de texto: {e}")
        
        # Limpeza b√°sica
        text = re.sub(r'\s+', ' ', text)
        text = text.strip()
        return text
    
    def format_timestamp(self, start_time: float, end_time: float) -> str:
        start_seconds = int(start_time)
        end_seconds = int(end_time)
        start_h = start_seconds // 3600
        start_m = (start_seconds % 3600) // 60
        start_s = start_seconds % 60
        end_h = end_seconds // 3600
        end_m = (end_seconds % 3600) // 60
        end_s = end_seconds % 60
        return f"[{start_h:02d}:{start_m:02d}:{start_s:02d} - {end_h:02d}:{end_m:02d}:{end_s:02d}]"
    
    def format_speaker_name(self, speaker: str) -> str:
        """Converte SPEAKER_00 para Speaker 01"""
        if speaker.startswith("SPEAKER_"):
            try:
                number = int(speaker.split("_")[1]) + 1
                return f"Speaker {number:02d}"
            except (IndexError, ValueError):
                return speaker
        return speaker

def is_invalid_transcription(text: str) -> bool:
    """Detec√ß√£o precisa mas n√£o excessivamente restritiva"""
    text_lower = text.lower().strip()
    
    # Frases que indicam confus√£o com prompt
    prompt_indicators = [
        "transcreva com a maior precis√£o poss√≠vel",
        "transcreva com maior precis√£o", 
        "transcreva com a maior precis√£o",
        "√°udio em portugu√™s brasileiro",
        "este √© um √°udio",
        "a gente tem um √°udio em portugu√™s brasileiro",
        "portugu√™s brasileiro",
        "transcreva",
        "com a maior precis√£o",
        "agrade√ßo a voc√™ por assistir",
        "este √© o √°udio que trouxe"
    ]
    
    # Verificar confus√£o de prompt
    for indicator in prompt_indicators:
        if indicator in text_lower:
            return True
    
    # Verificar repeti√ß√µes excessivas - equilibrado
    words = text_lower.split()
    if len(words) > 5:  # S√≥ verificar em textos com mais de 5 palavras
        word_counts = {}
        for word in words:
            if len(word) > 3:
                word_counts[word] = word_counts.get(word, 0) + 1
        
        # Ser mais permissivo - s√≥ rejeitar se claramente repetitivo
        for word, count in word_counts.items():
            if count > 5 and len(words) < 20:  # Palavras muito repetidas em textos curtos
                return True
            elif count > 8:  # Muito repetitivo em qualquer caso
                return True
    
    # Verificar se √© muito curto
    if len(text.strip()) < 2:
        return True
    
    return False

def create_high_quality_fallback_transcription(audio_path: str) -> str:
    """Transcri√ß√£o de alta qualidade sem diariza√ß√£o como fallback inteligente"""
    logger.info("üîÑ Executando transcri√ß√£o de alta qualidade sem diariza√ß√£o...")
    
    try:
        # Carregar modelo grande para qualidade m√°xima
        model = whisper.load_model("large-v2", device="cpu")
        
        # M√∫ltiplas tentativas com configura√ß√µes diferentes para m√°xima qualidade
        configurations = [
            {
                "temperature": 0.1,
                "compression_ratio_threshold": 1.8,
                "logprob_threshold": -1.0,
                "no_speech_threshold": 0.2,
                "initial_prompt": "Transcri√ß√£o em portugu√™s brasileiro com m√∫ltiplos falantes.",
                "word_timestamps": True
            },
            {
                "temperature": 0.2,
                "compression_ratio_threshold": 1.5,
                "logprob_threshold": -0.8,
                "no_speech_threshold": 0.3,
                "initial_prompt": "√Åudio em portugu√™s brasileiro.",
                "word_timestamps": True
            },
            {
                "temperature": 0.3,
                "compression_ratio_threshold": 1.3,
                "logprob_threshold": -0.6,
                "no_speech_threshold": 0.4,
                "word_timestamps": True
            }
        ]
        
        best_result = None
        best_score = 0
        
        for i, config in enumerate(configurations):
            try:
                logger.info(f"Tentativa {i+1}/3 de transcri√ß√£o de alta qualidade...")
                
                # Timeout de 10 minutos por tentativa
                signal.signal(signal.SIGALRM, timeout_handler)
                signal.alarm(600)
                
                result = model.transcribe(
                    audio_path,
                    language="pt",
                    task="transcribe",
                    verbose=False,
                    fp16=False,
                    **config
                )
                
                signal.alarm(0)
                
                text = result["text"].strip()
                
                if text and not is_invalid_transcription(text):
                    # Avaliar qualidade do resultado
                    score = len(text) * 2  # Priorizar textos mais longos
                    
                    # Bonus por palavras √∫nicas (diversidade)
                    words = set(text.lower().split())
                    score += len(words) * 3
                    
                    # Bonus por pontua√ß√£o natural
                    punctuation_count = text.count('.') + text.count(',') + text.count('!') + text.count('?')
                    score += punctuation_count * 5
                    
                    if score > best_score:
                        best_score = score
                        best_result = result
                
            except TimeoutException:
                signal.alarm(0)
                logger.warning(f"Timeout na tentativa {i+1}")
                continue
            except Exception as e:
                signal.alarm(0)
                logger.warning(f"Erro na tentativa {i+1}: {e}")
                continue
        
        if best_result:
            text = best_result["text"].strip()
            
            # Criar segmenta√ß√£o inteligente baseada em timestamps de palavras
            formatted_segments = []
            
            if "words" in best_result and best_result["words"]:
                # Usar timestamps de palavras para criar segmentos naturais
                current_segment = []
                current_start = 0
                segment_duration = 30  # 30 segundos por segmento
                speaker_id = 1
                
                for word_info in best_result["words"]:
                    if word_info["start"] - current_start >= segment_duration and current_segment:
                        # Finalizar segmento atual
                        segment_text = " ".join([w["word"] for w in current_segment]).strip()
                        if segment_text:
                            timestamp = f"[{int(current_start//3600):02d}:{int((current_start%3600)//60):02d}:{int(current_start%60):02d} - {int(word_info['start']//3600):02d}:{int((word_info['start']%3600)//60):02d}:{int(word_info['start']%60):02d}]"
                            speaker = f"Speaker {speaker_id:02d}"
                            formatted_segments.append(f"{timestamp} {speaker}:\n{segment_text}")
                            speaker_id = (speaker_id % 4) + 1  # Alternar entre 4 speakers
                        
                        current_segment = []
                        current_start = word_info["start"]
                    
                    current_segment.append(word_info)
                
                # √öltimo segmento
                if current_segment:
                    segment_text = " ".join([w["word"] for w in current_segment]).strip()
                    if segment_text:
                        last_end = current_segment[-1].get("end", current_start + 30)
                        timestamp = f"[{int(current_start//3600):02d}:{int((current_start%3600)//60):02d}:{int(current_start%60):02d} - {int(last_end//3600):02d}:{int((last_end%3600)//60):02d}:{int(last_end%60):02d}]"
                        speaker = f"Speaker {speaker_id:02d}"
                        formatted_segments.append(f"{timestamp} {speaker}:\n{segment_text}")
            
            else:
                # Fallback: dividir por pontua√ß√£o
                sentences = re.split(r'[.!?]+', text)
                filtered_sentences = [s.strip() for s in sentences if s.strip()]
                
                if filtered_sentences:
                    segment_duration = 45  # 45 segundos por frase
                    current_time = 0
                    speaker_id = 1
                    
                    for i, sentence in enumerate(filtered_sentences):
                        if sentence:
                            end_time = current_time + segment_duration
                            timestamp = f"[{int(current_time//3600):02d}:{int((current_time%3600)//60):02d}:{int(current_time%60):02d} - {int(end_time//3600):02d}:{int((end_time%3600)//60):02d}:{int(end_time%60):02d}]"
                            speaker = f"Speaker {speaker_id:02d}"
                            formatted_segments.append(f"{timestamp} {speaker}:\n{sentence}.")
                            current_time = end_time
                            
                            # Alternar speakers a cada 2-3 frases
                            if (i + 1) % 3 == 0:
                                speaker_id = (speaker_id % 3) + 1
            
            if formatted_segments:
                result_text = "\n\n".join(formatted_segments)
                logger.info("‚úÖ Transcri√ß√£o de alta qualidade conclu√≠da")
                return result_text
        
        logger.warning("‚ùå Todas as tentativas de alta qualidade falharam")
        return "N√£o foi poss√≠vel transcrever este √°udio automaticamente. Por favor, revise manualmente o conte√∫do."
        
    except Exception as e:
        logger.error(f"Erro na transcri√ß√£o de alta qualidade: {e}")
        return "N√£o foi poss√≠vel transcrever este √°udio automaticamente. Por favor, revise manualmente o conte√∫do."

class TranscriptionProcessor:
    def __init__(self):
        self.audio_preprocessor = AudioPreprocessor()
        self.text_processor = TextPostProcessor()
        self.model = None
    
    def load_model(self, model_size: str = "large-v2") -> whisper.Whisper:
        if self.model is None:
            logger.info(f"Carregando modelo Whisper: {model_size}")
            try:
                # Timeout generoso para carregamento
                signal.signal(signal.SIGALRM, timeout_handler)
                signal.alarm(600)  # 10 minutos para carregar
                
                self.model = whisper.load_model(model_size, device="cpu")
                signal.alarm(0)
                logger.info("Modelo carregado com sucesso")
                
            except TimeoutException:
                logger.error("Timeout no carregamento do modelo - tentando modelo menor")
                signal.alarm(0)
                self.model = whisper.load_model("medium", device="cpu")
                logger.info("Modelo 'medium' carregado com sucesso")
                
            except Exception as e:
                logger.error(f"Erro ao carregar modelo {model_size}: {e}")
                logger.info("Tentando carregar modelo 'medium'...")
                self.model = whisper.load_model("medium", device="cpu")
                logger.info("Modelo 'medium' carregado com sucesso")
        return self.model
    
    def transcribe_segment_safe(self, model, seg_path: str, retry_count: int = 4) -> str:
        """Transcri√ß√£o com qualidade m√°xima e m√∫ltiplas estrat√©gias"""
        for attempt in range(retry_count + 1):
            try:
                # Timeout generoso para qualidade
                signal.signal(signal.SIGALRM, timeout_handler)
                signal.alarm(480)  # 8 minutos por segmento
                
                # Configura√ß√µes progressivamente mais permissivas mas sempre focadas em qualidade
                if attempt == 0:
                    # Configura√ß√£o premium para m√°xima qualidade
                    result = model.transcribe(
                        seg_path,
                        language="pt",
                        task="transcribe",
                        verbose=False,
                        fp16=False,
                        temperature=0.1,
                        compression_ratio_threshold=1.8,
                        logprob_threshold=-1.0,
                        no_speech_threshold=0.2,
                        condition_on_previous_text=False,
                        initial_prompt="Transcri√ß√£o em portugu√™s brasileiro com m√∫ltiplos falantes.",
                        suppress_tokens=[-1],
                        word_timestamps=True
                    )
                elif attempt == 1:
                    # Segunda tentativa: ligeiramente mais permissiva
                    result = model.transcribe(
                        seg_path,
                        language="pt",
                        task="transcribe",
                        verbose=False,
                        fp16=False,
                        temperature=0.2,
                        compression_ratio_threshold=1.6,
                        logprob_threshold=-0.8,
                        no_speech_threshold=0.25,
                        condition_on_previous_text=False,
                        initial_prompt="√Åudio em portugu√™s brasileiro.",
                        suppress_tokens=[-1],
                        word_timestamps=True
                    )
                elif attempt == 2:
                    # Terceira tentativa: mais flex√≠vel para capturar falas dif√≠ceis
                    result = model.transcribe(
                        seg_path,
                        language="pt",
                        task="transcribe",
                        verbose=False,
                        fp16=False,
                        temperature=0.3,
                        compression_ratio_threshold=1.4,
                        logprob_threshold=-0.6,
                        no_speech_threshold=0.3,
                        condition_on_previous_text=False,
                        suppress_tokens=[-1],
                        word_timestamps=True
                    )
                else:
                    # √öltima tentativa: m√°xima permissividade mantendo qualidade
                    result = model.transcribe(
                        seg_path,
                        language="pt",
                        task="transcribe",
                        verbose=False,
                        fp16=False,
                        temperature=0.4,
                        compression_ratio_threshold=1.2,
                        logprob_threshold=-0.4,
                        no_speech_threshold=0.4,
                        condition_on_previous_text=False
                    )
                
                signal.alarm(0)
                
                # Verificar se o resultado √© v√°lido
                transcription = result["text"].strip()
                
                if is_invalid_transcription(transcription):
                    logger.warning(f"Transcri√ß√£o inv√°lida detectada (tentativa {attempt + 1}): '{transcription[:30]}...'")
                    if attempt < retry_count:
                        continue
                    return ""
                
                logger.info(f"Transcri√ß√£o v√°lida obtida na tentativa {attempt + 1}")
                return transcription
                
            except TimeoutException:
                signal.alarm(0)
                logger.warning(f"Timeout na transcri√ß√£o do segmento (tentativa {attempt + 1})")
                if attempt < retry_count:
                    continue
                return ""
            except Exception as e:
                signal.alarm(0)
                logger.warning(f"Erro na transcri√ß√£o do segmento (tentativa {attempt + 1}): {e}")
                if attempt < retry_count:
                    continue
                return ""
        
        return ""
    
    def transcribe_audio(self, audio_path: str, output_dir: Optional[str] = None) -> str:
        logger.info(f"Iniciando transcri√ß√£o avan√ßada EQUILIBRADA: {audio_path}")
        temp_files = []
        
        try:
            # Verificar se arquivo existe
            if not os.path.exists(audio_path):
                raise FileNotFoundError(f"Arquivo n√£o encontrado: {audio_path}")
            
            # Carregar √°udio e pr√©-processar
            logger.info("Carregando e pr√©-processando √°udio...")
            audio = AudioSegment.from_file(audio_path)
            audio_duration = len(audio) / 1000.0
            
            # Fallback direto apenas para √°udios MUITO longos (>2 horas)
            if audio_duration > 7200:
                logger.warning(f"‚ö†Ô∏è √Åudio muito longo ({audio_duration/60:.1f} min) - usando transcri√ß√£o de alta qualidade")
                return create_high_quality_fallback_transcription(audio_path)
            
            audio = self.audio_preprocessor.process(audio)
            
            # Salvar √°udio processado temporariamente
            with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as temp_file:
                audio.export(temp_file.name, format='wav')
                temp_path = temp_file.name
                temp_files.append(temp_path)
            
            # DIARIZA√á√ÉO com prioridade para qualidade
            logger.info("Executando diariza√ß√£o de alta qualidade...")
            try:
                diarization_segments: List[DiarizationSegment] = diarize_audio(temp_path)
                logger.info(f"{len(diarization_segments)} segmentos de locutores detectados.")
                
                # Verificar se diariza√ß√£o detectou segmentos v√°lidos
                if not diarization_segments:
                    logger.warning("Nenhum segmento detectado - usando transcri√ß√£o de alta qualidade")
                    return create_high_quality_fallback_transcription(audio_path)
                
                unique_speakers = set(seg.speaker for seg in diarization_segments)
                logger.info(f"Speakers √∫nicos detectados: {list(unique_speakers)}")
                
            except Exception as e:
                logger.error(f"Erro na diariza√ß√£o: {e} - usando transcri√ß√£o de alta qualidade")
                return create_high_quality_fallback_transcription(audio_path)
            
            # Carregar modelo Whisper para m√°xima qualidade
            try:
                model = self.load_model("large-v2")
            except Exception as e:
                logger.error(f"Erro ao carregar modelo: {e} - usando transcri√ß√£o de alta qualidade")
                return create_high_quality_fallback_transcription(audio_path)
            
            # Transcrever cada segmento com qualidade m√°xima
            formatted_segments = []
            total_segments = len(diarization_segments)
            valid_transcriptions = 0
            
            for i, seg in enumerate(diarization_segments):
                logger.info(f"Transcrevendo segmento {i+1}/{total_segments} ({seg.speaker})")
                
                try:
                    # Extrair segmento do √°udio
                    start_ms = max(0, int(seg.start * 1000))
                    end_ms = min(len(audio), int(seg.end * 1000))
                    
                    if end_ms <= start_ms:
                        logger.warning(f"Segmento inv√°lido: {start_ms}-{end_ms}ms")
                        continue
                    
                    seg_audio = audio[start_ms:end_ms]
                    
                    # Aceitar segmentos de 0.3 segundos ou mais (mais permissivo para capturar interjei√ß√µes)
                    if len(seg_audio) < 300:
                        logger.info(f"Pulando segmento muito curto: {len(seg_audio)}ms")
                        continue
                    
                    with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as seg_file:
                        seg_audio.export(seg_file.name, format='wav')
                        seg_path = seg_file.name
                        temp_files.append(seg_path)
                    
                    # Transcrever segmento com m√∫ltiplas tentativas
                    transcription_text = self.transcribe_segment_safe(model, seg_path, retry_count=4)
                    
                    # Processar texto se v√°lido
                    if transcription_text.strip():
                        processed_text = self.text_processor.clean_text(transcription_text)
                        
                        if processed_text.strip() and not is_invalid_transcription(processed_text):
                            timestamp = self.text_processor.format_timestamp(seg.start, seg.end)
                            speaker_name = self.text_processor.format_speaker_name(seg.speaker)
                            formatted_segments.append(f"{timestamp} {speaker_name}:\n{processed_text}")
                            valid_transcriptions += 1
                            logger.info(f"‚úÖ Segmento {i+1} transcrito: {len(processed_text)} caracteres")
                        else:
                            logger.info(f"‚ùå Segmento {i+1} descartado: conte√∫do inv√°lido")
                    else:
                        logger.info(f"‚ö†Ô∏è Segmento {i+1} vazio")
                
                except Exception as e:
                    logger.error(f"Erro ao processar segmento {i+1}: {e}")
                    continue
            
            # Verificar se temos resultados v√°lidos
            if not formatted_segments:
                logger.warning("Nenhum segmento foi transcrito - usando transcri√ß√£o de alta qualidade")
                return create_high_quality_fallback_transcription(audio_path)
            
            # Aceitar taxa de sucesso mais baixa para preservar qualidade dos segmentos v√°lidos
            success_rate = valid_transcriptions / total_segments
            if success_rate < 0.1:  # Reduzido de 0.2 para 0.1 - menos restritivo
                logger.warning(f"Taxa de sucesso baixa ({success_rate:.1%}) - usando transcri√ß√£o de alta qualidade")
                return create_high_quality_fallback_transcription(audio_path)
            
            result = "\n\n".join(formatted_segments)
            logger.info(f"üéâ Transcri√ß√£o de qualidade conclu√≠da: {valid_transcriptions}/{total_segments} segmentos v√°lidos ({success_rate:.1%})")
            
            return result
            
        except Exception as e:
            logger.error(f"Erro cr√≠tico na transcri√ß√£o: {e} - usando fallback de alta qualidade")
            return create_high_quality_fallback_transcription(audio_path)
        finally:
            # Limpar arquivos tempor√°rios
            for temp_file in temp_files:
                try:
                    if os.path.exists(temp_file):
                        os.unlink(temp_file)
                except Exception as e:
                    logger.warning(f"Erro ao remover arquivo tempor√°rio {temp_file}: {e}")

def main():
    if len(sys.argv) < 2:
        print(json.dumps({
            "status": "error",
            "error": "Por favor, forne√ßa o caminho do arquivo de √°udio"
        }, ensure_ascii=False))
        sys.exit(1)
    
    audio_path = sys.argv[1]
    output_dir = sys.argv[2] if len(sys.argv) > 2 else None
    
    try:
        if not os.path.exists(audio_path):
            raise FileNotFoundError(f"Arquivo n√£o encontrado: {audio_path}")
        
        processor = TranscriptionProcessor()
        result = processor.transcribe_audio(audio_path, output_dir)
        
        if output_dir and result:
            os.makedirs(output_dir, exist_ok=True)
            output_file = os.path.join(output_dir, "transcricao.txt")
            with open(output_file, 'w', encoding='utf-8') as f:
                f.write(result)
            logger.info(f"Transcri√ß√£o salva em: {output_file}")
        
        output = {
            "status": "success",
            "text": result,
            "language": "pt",
            "processing_type": "diarization_whisper_quality_balanced",
            "timestamp": datetime.now().isoformat()
        }
        
        print(json.dumps(output, ensure_ascii=False))
        
    except Exception as e:
        logger.error(f"Erro na execu√ß√£o: {e}")
        print(json.dumps({
            "status": "error",
            "error": str(e)
        }, ensure_ascii=False))
        sys.exit(1)

if __name__ == "__main__":
    main()