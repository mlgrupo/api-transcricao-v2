#!/usr/bin/env python3
"""
Teste r√°pido do sistema avan√ßado de transcri√ß√£o
"""

import sys
import os
import tempfile
import json
from pathlib import Path

def test_imports():
    """Testa se todas as depend√™ncias est√£o dispon√≠veis"""
    print("üß™ Testando importa√ß√µes...")
    
    try:
        import whisper
        import pydub
        import numpy as np
        import librosa
        import noisereduce as nr
        # import webrtcvad  # Removido - n√£o dispon√≠vel no Windows
        from spellchecker import SpellChecker
        import spacy
        import torch
        
        print("‚úÖ Todas as depend√™ncias importadas com sucesso")
        return True
    except ImportError as e:
        print(f"‚ùå Erro de importa√ß√£o: {e}")
        return False

def test_whisper_model():
    """Testa carregamento do modelo Whisper"""
    print("üé§ Testando modelo Whisper...")
    
    try:
        import whisper
        model = whisper.load_model("tiny")  # Modelo pequeno para teste r√°pido
        print("‚úÖ Modelo Whisper carregado com sucesso")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao carregar modelo Whisper: {e}")
        return False

def test_audio_processing():
    """Testa processamento de √°udio"""
    print("üéµ Testando processamento de √°udio...")
    
    try:
        from pydub import AudioSegment
        from pydub.generators import Sine
        
        # Criar √°udio de teste
        tone = Sine(440).to_audio_segment(duration=1000)
        
        # Testar normaliza√ß√£o
        normalized = tone.normalize()
        
        print("‚úÖ Processamento de √°udio funcionando")
        return True
    except Exception as e:
        print(f"‚ùå Erro no processamento de √°udio: {e}")
        return False

def test_transcription_system():
    """Testa o sistema de transcri√ß√£o"""
    print("üé§ Testando sistema de transcri√ß√£o...")
    
    try:
        # Importar m√≥dulos do sistema
        from transcribe import TranscriptionConfig, ParallelTranscriptionProcessor
        
        # Configura√ß√£o de teste
        config = TranscriptionConfig(
            chunk_duration_ms=30 * 1000,  # 30 segundos
            max_workers=2,
            max_memory_chunks=2,
            noise_reduction=False,  # Desabilitar para teste r√°pido
            silence_removal=False,
            spell_check=False
        )
        
        # Criar processador
        processor = ParallelTranscriptionProcessor(config)
        
        print("‚úÖ Sistema de transcri√ß√£o inicializado")
        return True
    except Exception as e:
        print(f"‚ùå Erro no sistema de transcri√ß√£o: {e}")
        return False

def test_context_detection():
    """Testa detec√ß√£o de contexto"""
    print("üß† Testando detec√ß√£o de contexto...")
    
    try:
        from transcribe import ContextDetector
        
        detector = ContextDetector()
        
        # Testar diferentes contextos
        test_files = [
            "reuniao_equipe.mp3",
            "entrevista_politico.mp3", 
            "palestra_universidade.mp3",
            "podcast_tecnologia.mp3",
            "audio_generico.mp3"
        ]
        
        for filename in test_files:
            context = detector.detect_context(filename)
            print(f"   {filename} -> {context}")
        
        print("‚úÖ Detec√ß√£o de contexto funcionando")
        return True
    except Exception as e:
        print(f"‚ùå Erro na detec√ß√£o de contexto: {e}")
        return False

def test_post_processing():
    """Testa p√≥s-processamento"""
    print("‚ú® Testando p√≥s-processamento...")
    
    try:
        from transcribe import TranscriptionConfig, IntelligentPostProcessor
        
        config = TranscriptionConfig(spell_check=True)
        processor = IntelligentPostProcessor(config)
        
        # Texto de teste
        test_text = "ol√°, como vc est√°? t√° tudo bem n√©? vamo faz√™ isso"
        
        # Processar
        processed = processor.process(test_text)
        
        print(f"   Original: {test_text}")
        print(f"   Processado: {processed}")
        
        print("‚úÖ P√≥s-processamento funcionando")
        return True
    except Exception as e:
        print(f"‚ùå Erro no p√≥s-processamento: {e}")
        return False

def create_test_audio():
    """Cria √°udio de teste"""
    print("üéµ Criando √°udio de teste...")
    
    try:
        from pydub import AudioSegment
        from pydub.generators import Sine
        
        # Criar tom de teste
        tone = Sine(440).to_audio_segment(duration=5000)  # 5 segundos
        
        # Salvar arquivo tempor√°rio
        temp_file = tempfile.NamedTemporaryFile(suffix='.mp3', delete=False)
        tone.export(temp_file.name, format='mp3')
        
        print(f"‚úÖ √Åudio de teste criado: {temp_file.name}")
        return temp_file.name
    except Exception as e:
        print(f"‚ùå Erro ao criar √°udio de teste: {e}")
        return None

def test_full_transcription():
    """Testa transcri√ß√£o completa"""
    print("üé§ Testando transcri√ß√£o completa...")
    
    try:
        # Criar √°udio de teste
        audio_file = create_test_audio()
        if not audio_file:
            return False
        
        # Importar e configurar
        from transcribe import TranscriptionConfig, ParallelTranscriptionProcessor
        
        config = TranscriptionConfig(
            chunk_duration_ms=30 * 1000,
            max_workers=1,
            max_memory_chunks=1,
            noise_reduction=False,
            silence_removal=False,
            spell_check=False
        )
        
        processor = ParallelTranscriptionProcessor(config)
        
        # Executar transcri√ß√£o
        result = processor.transcribe(audio_file)
        
        print(f"‚úÖ Transcri√ß√£o conclu√≠da: {len(result)} caracteres")
        
        # Limpar arquivo tempor√°rio
        os.unlink(audio_file)
        
        return True
    except Exception as e:
        print(f"‚ùå Erro na transcri√ß√£o completa: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("üöÄ Teste R√°pido do Sistema Avan√ßado de Transcri√ß√£o")
    print("=" * 60)
    
    tests = [
        ("Importa√ß√µes", test_imports),
        ("Modelo Whisper", test_whisper_model),
        ("Processamento de √Åudio", test_audio_processing),
        ("Sistema de Transcri√ß√£o", test_transcription_system),
        ("Detec√ß√£o de Contexto", test_context_detection),
        ("P√≥s-processamento", test_post_processing),
        ("Transcri√ß√£o Completa", test_full_transcription)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\n{'='*50}")
        print(f"Executando: {test_name}")
        print(f"{'='*50}")
        
        try:
            if test_func():
                passed += 1
                print(f"‚úÖ {test_name} PASSOU")
            else:
                print(f"‚ùå {test_name} FALHOU")
        except Exception as e:
            print(f"‚ùå {test_name} FALHOU com exce√ß√£o: {e}")
    
    print(f"\n{'='*60}")
    print(f"RESULTADO FINAL: {passed}/{total} testes passaram")
    print(f"{'='*60}")
    
    if passed == total:
        print("üéâ SISTEMA FUNCIONANDO PERFEITAMENTE!")
        print("\nüìã Pr√≥ximos passos:")
        print("1. Execute: python transcribe.py <arquivo_audio>")
        print("2. Configure par√¢metros conforme necess√°rio")
        print("3. Monitore logs para otimiza√ß√µes")
        return 0
    else:
        print("‚ö†Ô∏è Alguns testes falharam.")
        print("\nüîß Solu√ß√µes:")
        print("1. Execute: python install_dependencies.py")
        print("2. Verifique se FFmpeg est√° instalado")
        print("3. Consulte o README.md para troubleshooting")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 