#!/usr/bin/env python3
"""
Script de instala√ß√£o autom√°tica de depend√™ncias para o sistema de transcri√ß√£o
Vers√£o compat√≠vel com Windows
"""

import subprocess
import sys
import os
import platform
from pathlib import Path

def run_command(command, description):
    """Executa um comando e retorna o resultado"""
    print(f"üîÑ {description}...")
    try:
        result = subprocess.run(
            command, 
            shell=True, 
            capture_output=True, 
            text=True, 
            check=True
        )
        print(f"‚úÖ {description} conclu√≠do")
        return True, result.stdout
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro em {description}: {e}")
        print(f"   Comando: {command}")
        print(f"   Erro: {e.stderr}")
        return False, e.stderr

def check_python_version():
    """Verifica se a vers√£o do Python √© compat√≠vel"""
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print("‚ùå Python 3.8+ √© necess√°rio")
        return False
    print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} detectado")
    return True

def install_pip_package(package, version=None):
    """Instala um pacote pip com fallback"""
    if version:
        package_spec = f"{package}=={version}"
    else:
        package_spec = package
    
    success, output = run_command(
        f"pip install {package_spec}",
        f"Instalando {package_spec}"
    )
    
    if not success:
        # Tentar sem vers√£o espec√≠fica
        if version:
            print(f"üîÑ Tentando instalar {package} sem vers√£o espec√≠fica...")
            success, output = run_command(
                f"pip install {package}",
                f"Instalando {package} (sem vers√£o)"
            )
    
    return success

def install_system_dependencies():
    """Instala depend√™ncias do sistema"""
    system = platform.system().lower()
    
    if system == "windows":
        print("üîÑ Verificando depend√™ncias do Windows...")
        
        # Verificar se o Visual C++ Build Tools est√° instalado
        try:
            result = subprocess.run(
                "where cl.exe", 
                shell=True, 
                capture_output=True, 
                text=True
            )
            if result.returncode == 0:
                print("‚úÖ Visual C++ Build Tools detectado")
            else:
                print("‚ö†Ô∏è  Visual C++ Build Tools n√£o encontrado")
                print("   Algumas bibliotecas podem falhar na compila√ß√£o")
                print("   Instale em: https://visualstudio.microsoft.com/visual-cpp-build-tools/")
        except:
            pass
    
    elif system == "linux":
        print("üîÑ Instalando depend√™ncias do sistema Linux...")
        run_command("sudo apt-get update", "Atualizando reposit√≥rios")
        run_command(
            "sudo apt-get install -y ffmpeg portaudio19-dev python3-dev build-essential",
            "Instalando depend√™ncias do sistema"
        )
    
    elif system == "darwin":  # macOS
        print("üîÑ Verificando depend√™ncias do macOS...")
        run_command("brew install ffmpeg portaudio", "Instalando depend√™ncias via Homebrew")

def install_python_packages():
    """Instala pacotes Python"""
    print("\nüì¶ Instalando pacotes Python...")
    
    # Depend√™ncias principais (mais est√°veis)
    core_packages = [
        ("openai-whisper", "20231117"),
        ("pydub", "0.25.1"),
        ("numpy", "1.24.3"),
        ("python-dotenv", "1.0.0"),
        ("requests", "2.31.0"),
        ("spellchecker", "0.7.2")
    ]
    
    for package, version in core_packages:
        install_pip_package(package, version)
    
    # Depend√™ncias que podem ser problem√°ticas
    problematic_packages = [
        ("librosa", "0.10.1"),
        ("noisereduce", "3.0.0"),
        ("spacy", "3.7.2")
    ]
    
    for package, version in problematic_packages:
        success = install_pip_package(package, version)
        if not success:
            print(f"‚ö†Ô∏è  {package} falhou na instala√ß√£o - tentando sem vers√£o espec√≠fica")
            install_pip_package(package)

def download_spacy_model():
    """Baixa modelo do spaCy"""
    print("\nü§ñ Baixando modelo do spaCy...")
    success, output = run_command(
        "python -m spacy download pt_core_news_sm",
        "Baixando modelo portugu√™s do spaCy"
    )
    
    if not success:
        print("‚ö†Ô∏è  Modelo spaCy n√£o p√¥de ser baixado")
        print("   O processamento de texto pode ser limitado")

def verify_installation():
    """Verifica se a instala√ß√£o foi bem-sucedida"""
    print("\nüîç Verificando instala√ß√£o...")
    
    test_imports = [
        "whisper",
        "pydub", 
        "numpy",
        "librosa",
        "noisereduce",
        "spellchecker"
    ]
    
    failed_imports = []
    
    for module in test_imports:
        try:
            __import__(module)
            print(f"‚úÖ {module} - OK")
        except ImportError as e:
            print(f"‚ùå {module} - FALHOU: {e}")
            failed_imports.append(module)
    
    if failed_imports:
        print(f"\n‚ö†Ô∏è  {len(failed_imports)} m√≥dulos falharam na importa√ß√£o:")
        for module in failed_imports:
            print(f"   - {module}")
        return False
    
    print("\nüéâ Todas as depend√™ncias foram instaladas com sucesso!")
    return True

def main():
    """Fun√ß√£o principal"""
    print("üöÄ Instalador de Depend√™ncias - Sistema de Transcri√ß√£o")
    print("=" * 50)
    
    # Verificar Python
    if not check_python_version():
        sys.exit(1)
    
    # Instalar depend√™ncias do sistema
    install_system_dependencies()
    
    # Instalar pacotes Python
    install_python_packages()
    
    # Baixar modelo spaCy
    download_spacy_model()
    
    # Verificar instala√ß√£o
    success = verify_installation()
    
    if success:
        print("\n‚ú® Instala√ß√£o conclu√≠da com sucesso!")
        print("   Voc√™ pode agora executar o sistema de transcri√ß√£o.")
    else:
        print("\n‚ö†Ô∏è  Algumas depend√™ncias falharam na instala√ß√£o.")
        print("   Verifique os erros acima e tente novamente.")
        sys.exit(1)

if __name__ == "__main__":
    main() 