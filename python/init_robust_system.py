#!/usr/bin/env python3
"""
INICIALIZADOR DO SISTEMA ROBUSTO
================================
Script que inicializa automaticamente toda a integra√ß√£o da arquitetura robusta
com o sistema existente de transcri√ß√£o.
"""

import os
import sys
import json
import subprocess
import time
import asyncio
from pathlib import Path
from typing import Dict, List, Any

def print_banner():
    """Imprime banner do sistema"""
    banner = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    SISTEMA ROBUSTO DE DIARIZA√á√ÉO            ‚ïë
‚ïë                                                              ‚ïë
‚ïë  üöÄ Arquitetura robusta para processamento simult√¢neo       ‚ïë
‚ïë  üìä Monitoramento de recursos em tempo real                ‚ïë
‚ïë  üéØ Diariza√ß√£o avan√ßada com pyannote.audio                 ‚ïë
‚ïë  üîÑ Fallback autom√°tico para sistema atual                 ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
"""
    print(banner)

def check_environment() -> Dict[str, Any]:
    """Verifica ambiente e depend√™ncias"""
    print("üîç VERIFICANDO AMBIENTE")
    print("=" * 50)
    
    checks = {
        "python_version": sys.version_info >= (3, 8),
        "pip_available": False,
        "ffmpeg_available": False,
        "required_vars": [],
        "optional_vars": []
    }
    
    # Verificar vers√£o do Python
    print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}")
    
    # Verificar pip
    try:
        import pip
        checks["pip_available"] = True
        print("‚úÖ pip dispon√≠vel")
    except ImportError:
        print("‚ùå pip n√£o dispon√≠vel")
    
    # Verificar ffmpeg
    try:
        result = subprocess.run(["ffmpeg", "-version"], capture_output=True, text=True)
        checks["ffmpeg_available"] = result.returncode == 0
        if checks["ffmpeg_available"]:
            print("‚úÖ ffmpeg dispon√≠vel")
        else:
            print("‚ùå ffmpeg n√£o dispon√≠vel")
    except FileNotFoundError:
        print("‚ùå ffmpeg n√£o encontrado")
    
    # Verificar vari√°veis de ambiente
    required_vars = ["HUGGINGFACE_TOKEN"]
    optional_vars = ["OPENAI_API_KEY"]
    
    for var in required_vars:
        if os.environ.get(var):
            checks["required_vars"].append(var)
            print(f"‚úÖ {var} configurada")
        else:
            print(f"‚ùå {var} n√£o configurada")
    
    for var in optional_vars:
        if os.environ.get(var):
            checks["optional_vars"].append(var)
            print(f"‚úÖ {var} configurada (opcional)")
        else:
            print(f"‚ö†Ô∏è {var} n√£o configurada (opcional)")
    
    return checks

def install_dependencies() -> bool:
    """Instala depend√™ncias necess√°rias"""
    print("\nüì¶ INSTALANDO DEPEND√äNCIAS")
    print("=" * 50)
    
    # Verificar se requirements-robust.txt existe
    if not Path("requirements-robust.txt").exists():
        print("‚ùå requirements-robust.txt n√£o encontrado")
        return False
    
    try:
        # Instalar depend√™ncias
        print("üîÑ Instalando depend√™ncias da arquitetura robusta...")
        result = subprocess.run(
            ["pip", "install", "-r", "requirements-robust.txt"],
            capture_output=True,
            text=True,
            check=True
        )
        print("‚úÖ Depend√™ncias instaladas com sucesso")
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao instalar depend√™ncias: {e.stderr}")
        return False

def setup_robust_architecture() -> bool:
    """Configura a arquitetura robusta"""
    print("\n‚öôÔ∏è CONFIGURANDO ARQUITETURA ROBUSTA")
    print("=" * 50)
    
    # Verificar se todos os arquivos necess√°rios existem
    required_files = [
        "resource_manager.py",
        "audio_chunker.py",
        "whisper_processor.py", 
        "speaker_diarizer.py",
        "transcription_merger.py",
        "diarization_orchestrator.py",
        "robust_transcription_adapter.py"
    ]
    
    missing_files = []
    for file in required_files:
        if not Path(file).exists():
            missing_files.append(file)
        else:
            print(f"‚úÖ {file}")
    
    if missing_files:
        print(f"‚ùå Arquivos ausentes: {missing_files}")
        return False
    
    # Testar importa√ß√µes
    try:
        print("\nüîÑ Testando importa√ß√µes...")
        
        from resource_manager import ResourceManager
        from diarization_orchestrator import DiarizationOrchestrator
        from robust_transcription_adapter import RobustTranscriptionAdapter
        
        print("‚úÖ Todas as importa√ß√µes funcionando")
        
        # Testar inicializa√ß√£o b√°sica
        print("üîÑ Testando inicializa√ß√£o...")
        
        resource_manager = ResourceManager(
            max_ram_gb=30,
            max_cpu_percent=80,
            max_concurrent_jobs=2
        )
        
        orchestrator = DiarizationOrchestrator(
            resource_manager=resource_manager,
            max_workers=2,
            timeout_minutes=5,
            max_retries=2
        )
        
        adapter = RobustTranscriptionAdapter()
        
        print("‚úÖ Inicializa√ß√£o bem-sucedida")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na configura√ß√£o: {e}")
        return False

def create_configuration() -> bool:
    """Cria arquivo de configura√ß√£o"""
    print("\nüìù CRIANDO CONFIGURA√á√ÉO")
    print("=" * 50)
    
    config = {
        "integration_version": "1.0.0",
        "robust_architecture_enabled": True,
        "fallback_to_current_system": True,
        "resource_limits": {
            "max_ram_gb": 30,
            "max_cpu_percent": 80,
            "max_concurrent_jobs": 2
        },
        "processing_config": {
            "max_workers": 4,
            "timeout_minutes": 10,
            "max_retries": 3,
            "chunk_duration_seconds": 30,
            "chunk_overlap_seconds": 5
        },
        "diarization_config": {
            "max_speakers": 6,
            "min_speaker_duration": 1.0,
            "speaker_consistency_threshold": 0.7
        },
        "output_formats": ["json", "srt", "txt"],
        "logging_level": "INFO",
        "auto_fallback": True,
        "performance_monitoring": True
    }
    
    try:
        with open("robust_integration_config.json", "w", encoding="utf-8") as f:
            json.dump(config, f, indent=2, ensure_ascii=False)
        
        print("‚úÖ Configura√ß√£o criada: robust_integration_config.json")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao criar configura√ß√£o: {e}")
        return False

async def test_system() -> bool:
    """Testa o sistema completo"""
    print("\nüß™ TESTANDO SISTEMA")
    print("=" * 50)
    
    try:
        from robust_transcription_adapter import get_adapter
        
        adapter = get_adapter()
        
        # Verificar status
        status = adapter.get_system_status()
        print(f"üìä Status do sistema: {json.dumps(status, indent=2)}")
        
        # Testar sistemas
        test_results = await adapter.test_systems()
        print(f"üß™ Resultados dos testes: {json.dumps(test_results, indent=2)}")
        
        if test_results["robust_architecture"] or test_results["current_system"]:
            print("‚úÖ Sistema funcionando corretamente!")
            return True
        else:
            print("‚ùå Nenhum sistema funcionando")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")
        return False

def create_startup_script() -> bool:
    """Cria script de inicializa√ß√£o"""
    print("\nüöÄ CRIANDO SCRIPT DE INICIALIZA√á√ÉO")
    print("=" * 50)
    
    startup_script = '''#!/usr/bin/env python3
"""
SCRIPT DE INICIALIZA√á√ÉO DO SISTEMA ROBUSTO
=========================================
Execute este script para inicializar o sistema robusto de diariza√ß√£o
"""

import sys
import os
from pathlib import Path

def main():
    # Adicionar diret√≥rio atual ao path
    current_dir = Path(__file__).parent
    sys.path.insert(0, str(current_dir))
    
    try:
        from robust_transcription_adapter import get_adapter
        import asyncio
        
        print("üöÄ Inicializando sistema robusto...")
        
        # Obter adaptador
        adapter = get_adapter()
        
        # Verificar status
        status = adapter.get_system_status()
        print(f"üìä Status: {status}")
        
        if status.get("using_robust_architecture"):
            print("‚úÖ Sistema robusto ativo")
        else:
            print("üìä Usando sistema atual como fallback")
        
        print("üéØ Sistema pronto para uso!")
        
    except Exception as e:
        print(f"‚ùå Erro na inicializa√ß√£o: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
'''
    
    try:
        with open("start_robust_system.py", "w", encoding="utf-8") as f:
            f.write(startup_script)
        
        # Tornar execut√°vel
        os.chmod("start_robust_system.py", 0o755)
        
        print("‚úÖ Script de inicializa√ß√£o criado: start_robust_system.py")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao criar script: {e}")
        return False

def create_documentation() -> bool:
    """Cria documenta√ß√£o da integra√ß√£o"""
    print("\nüìö CRIANDO DOCUMENTA√á√ÉO")
    print("=" * 50)
    
    docs = """# INTEGRA√á√ÉO DA ARQUITETURA ROBUSTA

## Vis√£o Geral
Este sistema integra uma arquitetura robusta de diariza√ß√£o com o sistema existente de transcri√ß√£o.

## Componentes
- **ResourceManager**: Gerencia recursos do sistema (RAM, CPU)
- **AudioChunker**: Divide √°udio em chunks otimizados
- **WhisperProcessor**: Processa transcri√ß√£o com Whisper
- **SpeakerDiarizer**: Identifica speakers usando pyannote.audio
- **TranscriptionMerger**: Combina transcri√ß√£o e diariza√ß√£o
- **DiarizationOrchestrator**: Orquestra todo o processo
- **RobustTranscriptionAdapter**: Adaptador para integra√ß√£o

## Configura√ß√£o
1. Configure as vari√°veis de ambiente:
   - HUGGINGFACE_TOKEN (obrigat√≥rio)
   - OPENAI_API_KEY (opcional)

2. Execute o script de configura√ß√£o:
   ```bash
   python setup_robust_integration.py
   ```

3. Teste o sistema:
   ```bash
   python test_robust_integration.py
   ```

## Uso
O sistema √© usado automaticamente pelo TranscriptionProcessor do Node.js.
Ele escolhe automaticamente entre a arquitetura robusta e o sistema atual.

## Monitoramento
- Use `/api/robust/status` para verificar status
- Use `/api/robust/metrics` para m√©tricas de recursos
- Use `/api/robust/logs` para logs do sistema

## Troubleshooting
1. Verifique se todas as depend√™ncias est√£o instaladas
2. Configure as vari√°veis de ambiente necess√°rias
3. Execute os testes para verificar funcionamento
4. Verifique os logs para identificar problemas
"""
    
    try:
        with open("ROBUST_INTEGRATION_README.md", "w", encoding="utf-8") as f:
            f.write(docs)
        
        print("‚úÖ Documenta√ß√£o criada: ROBUST_INTEGRATION_README.md")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao criar documenta√ß√£o: {e}")
        return False

async def main():
    """Fun√ß√£o principal"""
    print_banner()
    
    # Verificar se estamos no diret√≥rio correto
    if not Path("requirements-robust.txt").exists():
        print("‚ùå Execute este script no diret√≥rio python/")
        print("   cd python/")
        print("   python init_robust_system.py")
        sys.exit(1)
    
    # Executar etapas
    steps = [
        ("Verificando ambiente", lambda: check_environment()),
        ("Instalando depend√™ncias", install_dependencies),
        ("Configurando arquitetura", setup_robust_architecture),
        ("Criando configura√ß√£o", create_configuration),
        ("Testando sistema", lambda: asyncio.run(test_system())),
        ("Criando script de inicializa√ß√£o", create_startup_script),
        ("Criando documenta√ß√£o", create_documentation)
    ]
    
    success_count = 0
    total_steps = len(steps)
    
    for step_name, step_func in steps:
        print(f"\n{'='*70}")
        print(f"PASSO {success_count + 1}/{total_steps}: {step_name.upper()}")
        print(f"{'='*70}")
        
        try:
            if step_func():
                success_count += 1
            else:
                print(f"‚ö†Ô∏è Falha no passo: {step_name}")
        except Exception as e:
            print(f"‚ùå Erro no passo {step_name}: {e}")
    
    # Resumo final
    print(f"\n{'='*70}")
    print("RESUMO DA INICIALIZA√á√ÉO")
    print(f"{'='*70}")
    print(f"‚úÖ Passos conclu√≠dos: {success_count}/{total_steps}")
    
    if success_count == total_steps:
        print("üéâ Sistema robusto inicializado com sucesso!")
        print("\nüìã PR√ìXIMOS PASSOS:")
        print("1. Reinicie o servidor Node.js")
        print("2. Teste uma transcri√ß√£o")
        print("3. Monitore os recursos em /api/robust/metrics")
        print("4. Verifique logs em /api/robust/logs")
    else:
        print("‚ö†Ô∏è Alguns passos falharam. Verifique os erros acima.")
        print("\nüí° DICAS:")
        print("- Configure as vari√°veis de ambiente necess√°rias")
        print("- Verifique se todas as depend√™ncias foram instaladas")
        print("- Execute o teste para verificar a integra√ß√£o")
    
    print(f"\nüìÅ Arquivos criados:")
    files_to_check = [
        "robust_integration_config.json",
        "start_robust_system.py",
        "ROBUST_INTEGRATION_README.md"
    ]
    
    for file in files_to_check:
        if Path(file).exists():
            print(f"   ‚úÖ {file}")

if __name__ == "__main__":
    asyncio.run(main()) 